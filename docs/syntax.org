#+title: Tangi Syntax
* File
A file is the second biggest unit of compilation, that is also sometimes called a =module=.
You could import files by using the ~import~ function and assigning it to a const, like this:

#+begin_example tangi
const parser = import("frontend/parser.tn");
#+end_src

* Item
** Function
A function is a function
*** Block
A block is a block containing multiple statements, that could also be expressions.
**** Statement
***** Return statement
A return statement is a statement that, if reached, stops execution of current block,
and returns the specified value (like in ~return 128~ 128 is the return value),
or ~()~, if no return value is specified. (like ~return~)
***** If statement
An if statement has different styles:
- Quick
  ~if condition => return~
- Rust style
  ~if condition { return }~
- C style
  ~if (condition) return~
All of them have the same functionality

("breaking barriers", literally)
***** Variable declaration
In Tangi, you declare variables, ... in a.. different way.

#+begin_example tangi
let something = true;

// or mutably:
mut bonk = -1e8;
#+end_example

You could also declare it with a type, although usually it is inferred.
#+begin_example tangi
i32 variable = -18;

// or mutably:

mut i12 y = 147;
#+end_example

***** For statement and other loops
The ~for~ statement lets you loop over the contents of a value implementing ~Iterator~.

#+begin_example tangi
// compile error - int too large
for h <- 0..190238102381283018230182380180923890128903189023980129803 {
    std.debug.eprintln("{}", h);
}
#+end_example
* Types
** Error union
An error union is a type, that contains either an error, or another ("happy path", if you prefer) value.
An error union type is declared like this:
#+begin_example tangi
ErrorEnum!HappyValue
#+end_example

An error union could have its' error type inferred (i.e. left out like ~!HappyValue~),
if it is consistent across the whole function and it implements the ~Error~ trait.
The "happy path" type cannot implement ~Error~
when the error type is inferred (as it would conflict with inference).
